{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{324:function(s,a,n){\"use strict\";n.r(a);var e=n(30),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"typescript-基础\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#typescript-基础\"}},[s._v(\"#\")]),s._v(\" TypeScript 基础\")]),s._v(\" \"),n(\"p\",[s._v(\"TypeScript 是 JavaScript 的超集, 支持 JavaScript 的写法，并且提供类型检查，TypeScript 提供了一些面向对象编程的能力。\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"数据类型\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据类型\"}},[s._v(\"#\")]),s._v(\" 数据类型\")]),s._v(\" \"),n(\"p\",[s._v(\"JavaScript 目前的基础数据类型有 \"),n(\"code\",[s._v(\"Number， String ，Boolean， Null ，Undfiend ，Symbol ，BigInt\")]),s._v(\",引用数据类型 \"),n(\"code\",[s._v(\"Array Object Function、Date等\")]),s._v(\"\\nTypeScript 在 JavaScript 的基础上添加了 \"),n(\"code\",[s._v(\"Never Any Enum Tuple Void\")]),s._v(\"这些基础数据类型\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"Never\")]),s._v(\"\\n表示永远不存在值的类型，没有值可以赋值给 Never 类型\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"Any\")]),s._v(\"\\n表示可以成为任何类型，比如设定一个变量 没想好它是什么类型的，但是又要通过类型检查，可以设定为 Any\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"Void\")]),s._v(\"\\n表示没有任何类型,比如一些函数没有返回值，可以把这个函数设置为 void 型\")]),s._v(\" \"),n(\"p\",[n(\"strong\",[s._v(\"Enum 枚举\")]),s._v(\"\\n枚举是为一组数据赋予了名字，便于读取这组数据中的元素，例如\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"enum Color {Red = 1, Green = 2, Blue = 4}\\nlet c:Color = Color.Red;\\nconsole.log(c) // outut: 1\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[s._v(\"Tuple 元组\")]),s._v(\"\\n当你想表示一个已知元素数量和类型的数组，各元素的类型不相同，可以使用元组，例如\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"let  arr:[string, number]\\narr = ['a',1]\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"类型断言\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类型断言\"}},[s._v(\"#\")]),s._v(\" 类型断言\")]),s._v(\" \"),n(\"p\",[s._v(\"类型断言就是书写本身去确定数据类型，不经过类型检查\")]),s._v(\" \"),n(\"p\",[s._v(\"有两种写法\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"// 尖括号\\nlet str:any = 'xxx'\\nlet strlength = (<string>str).length\\n\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\")])]),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"// as\\nlet str:any = 'xxx'\\nlet strlength = (<str as string).length\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"接口\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#接口\"}},[s._v(\"#\")]),s._v(\" 接口\")]),s._v(\" \"),n(\"p\",[s._v(\"TypeScript 的核心思想是提供类型检查，接口 interface 就类似于一个契约，我们提前约定一个类型限制\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"对属性的约束\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对属性的约束\"}},[s._v(\"#\")]),s._v(\" 对属性的约束\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"interface Value {\\n  label: string;\\n}\\nfunction check(obj:Value){\\n    consle.log(obj.label)\\n}\\nlet a  = {age:17,label:'xxx'}\\n\\ncheck(a) // output : 'xxx'\\n\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"对函数的约束\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对函数的约束\"}},[s._v(\"#\")]),s._v(\" 对函数的约束\")]),s._v(\" \"),n(\"p\",[s._v(\"对函数的约束可以变量不同，但是类型要一致\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"interface Func{\\nname:string;\\nnum:number;\\n}\\nfunction getdata:Func(name:string,value:number){\\n    console.log(value, name)\\n}\\ngetdata({name:'xxx',vakue:16})\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"可索引的接口\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可索引的接口\"}},[s._v(\"#\")]),s._v(\" 可索引的接口\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"// 定义一个数组\\n\\ninterface Arr{\\n    [index:number]:number\\n}\\nlet array:Arr = [1,2,3,4]\\nconsole.log(array[0]) // output:1\\n\\nlet brr:Arr = ['xxx','yyy'] // error!\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"可选属性预定义\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可选属性预定义\"}},[s._v(\"#\")]),s._v(\" 可选属性预定义\")]),s._v(\" \"),n(\"p\",[s._v(\"对一些可能存在存在的属性进行提前定义\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"interface data{\\n    name ?:string;\\n    age ?:number;\\n}\\n\\nfunction check(obj:data):{name:number,sex:number}{\\nlet newvalue = {name:'xxx',sex:'fexmal'}\\nreturn newSquare\\n}\\n\\ncheck({name:'yyy'})\\n\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"readonly-const\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#readonly-const\"}},[s._v(\"#\")]),s._v(\" readonly / const\")]),s._v(\" \"),n(\"p\",[s._v(\"const 用于声明一个常量，readonly 用于定义接口中的只读属性\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"interface Point {\\n    readonly x: number;\\n    readonly y: number;\\n}\\nlet p1: Point = { x: 10, y: 20 };\\np1.x = 5 // error!\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"泛型\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型\"}},[s._v(\"#\")]),s._v(\" 泛型\")]),s._v(\" \"),n(\"p\",[s._v(\"泛型可以帮助我们复用组件，不限制传入的数据类型\")]),s._v(\" \"),n(\"p\",[s._v(\"假设我们使用 any 来定义函数，也可以不限制输入的数据类型,但是这种做法就没有办法控制函数的返回类型，可以输出任意的类型\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"function func(arg: any):any{\\n   return arg;\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"p\",[s._v(\"但是我们假设设置一个 T 变量帮我们捕获数据类型，限制函数返回的也是这个类型，这种类型的函数被称为泛型\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"function identity<T>(arg: T): T {\\n    return arg;\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"泛型类\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型类\"}},[s._v(\"#\")]),s._v(\" 泛型类\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"class Min<T>{\\n    public arr:T[]=[];\\n    add(value:T){\\n        this.arr.push(value);\\n    }\\n}\\nvar m1=new MinClassT<number>();\\nm1.add(123)\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"泛型函数\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型函数\"}},[s._v(\"#\")]),s._v(\" 泛型函数\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"  function getData<T>(value:T):T{\\n        return value;\\n    }\\n     getData<number>(123);\\n\\n     getData<string>('1214231');\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"泛型接口\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型接口\"}},[s._v(\"#\")]),s._v(\" 泛型接口\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"interface ConfigFn{\\n     <T>(value:T):T;\\n}\\n\\nvar getData:ConfigFn=function<T>(value:T):T{\\n    return value;\\n}\\n    getData<string>('张三');\\n    getData<string>(1243);  //error!\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"函数\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数\"}},[s._v(\"#\")]),s._v(\" 函数\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"类型推论\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类型推论\"}},[s._v(\"#\")]),s._v(\" 类型推论\")]),s._v(\" \"),n(\"p\",[s._v(\"类型推论也和类型检查有关，当我们没有特意指明类型时，TypeScript 会自动进行类型推论来确定类型\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"通用\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通用\"}},[s._v(\"#\")]),s._v(\" 通用\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"let x = 3 // success ，这里x被推论出是number型的\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"上下文类型\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#上下文类型\"}},[s._v(\"#\")]),s._v(\" 上下文类型\")]),s._v(\" \"),n(\"p\",[s._v(\"有的时候 TypeScript 会根据所处的上下文进行推论\\n比如我们通常的写法：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"window.onmousedown = function(mouseEvent) {\\n    console.log(mouseEvent.button);  // Error！\\n};\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"p\",[s._v(\"上面这种写法没有指明 mouseEvent 的类型，TypeScript 会根据 window.onmousedown 来推论，但是把 mouseEvent 设置为 any 类型就可以通过类型检查了\")])])}),[],!1,null,null,null);a.default=t.exports}}]);","extractedComments":[]}